name: Test API & Preview Threads

on:
  workflow_dispatch:
    inputs:
      max_articles:
        description: 'Maximum articles to preview (1-5)'
        required: false
        default: '3'
        type: choice
        options:
        - '1'
        - '2' 
        - '3'
        - '4'
        - '5'

jobs:
  test-and-preview:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Test APIs and Generate Preview
      env:
        TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
        TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        EVENTREGISTRY_API_KEY: ${{ secrets.EVENTREGISTRY_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python -c "
import os
import json
from datetime import datetime
from core import BitcoinMiningBot, Config, TextProcessor

def test_apis_and_create_issue():
    print('üß™ Testing Live APIs for Thread Preview')
    print('=' * 50)
    
    try:
        # Initialize bot
        config = Config.from_env()
        missing_keys = config.validate()
        
        if 'EVENTREGISTRY_API_KEY' in missing_keys:
            print('‚ùå EventRegistry API key missing')
            return False
            
        bot = BitcoinMiningBot(config=config)
        max_articles = int('${{ github.event.inputs.max_articles }}' or '3')
        
        # Fetch articles
        print(f'üì∞ Fetching up to {max_articles} articles from EventRegistry...')
        articles = bot.news.fetch_articles()[:max_articles]
        
        if not articles:
            print('‚ùå No articles found')
            issue_body = '''# ‚ö†Ô∏è No Articles Found

**EventRegistry API Response:** No Bitcoin mining articles found in the last 6 hours.

This could mean:
- No recent Bitcoin mining news
- API filters too restrictive  
- EventRegistry API issue

**Next Steps:**
1. Check EventRegistry dashboard for available articles
2. Review API filters in core.py
3. Try again later when fresh news is available
'''
        else:
            print(f'‚úÖ Found {len(articles)} articles')
            
            # Test Gemini availability
            gemini_available = 'GEMINI_API_KEY' not in missing_keys and bot.gemini is not None
            print(f'ü§ñ Gemini AI: {\"Available\" if gemini_available else \"Not Available\"}')
            
            # Generate thread previews
            issue_body = f'''# üßµ Thread Previews - {datetime.now().strftime(\"%Y-%m-%d %H:%M UTC\")}

**API Status:**
- ‚úÖ EventRegistry: {len(articles)} articles fetched
- {'‚úÖ' if gemini_available else '‚ùå'} Gemini AI: {'Available' if gemini_available else 'Not Available'}

**Thread Previews:**

'''
            
            for i, article in enumerate(articles, 1):
                issue_body += f'''## üì∞ Article {i}

**Title:** {article.title}
**Source:** {article.source or \"Unknown\"}
**Published:** {article.date_published}
**URL:** {article.url}

### üßµ Generated Thread:

'''
                
                try:
                    thread = TextProcessor.create_tweet_thread(article, bot.gemini if gemini_available else None)
                    
                    for j, tweet in enumerate(thread, 1):
                        issue_body += f'''**Tweet {j}:** ({len(tweet)} chars)
```
{tweet}
```

'''
                    
                    issue_body += f'''**Thread Summary:** {len(thread)} tweets total

---

'''
                except Exception as e:
                    issue_body += f'''‚ùå **Error generating thread:** {str(e)}

---

'''
            
            issue_body += '''
## üìù Next Steps

1. **Review the threads above** - Check quality of headlines and summaries
2. **Edit if needed** - Adjust Gemini prompts in `core.py` if threads need improvement  
3. **Test again** - Run this workflow again to see updated results
4. **Go live** - Let the main workflow run automatically when satisfied

## üõ†Ô∏è Editing Guidelines

**To improve thread quality:**
- Edit `GeminiClient.generate_catchy_headline()` in `core.py` for better headlines
- Edit `GeminiClient.generate_thread_summary()` in `core.py` for better summaries
- Adjust prompts to match your preferred style and tone

**Thread Structure:**
- With Gemini: Headline ‚Üí Summary (3 points) ‚Üí URL
- Without Gemini: Smart prefix + title ‚Üí URL
'''
        
        # Save issue body to file for GitHub CLI
        with open('preview_issue.md', 'w') as f:
            f.write(issue_body)
            
        print('‚úÖ Preview generated successfully')
        return True
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()
        
        # Create error issue
        error_issue = f'''# ‚ùå API Testing Error

**Error occurred during API testing:**

```
{str(e)}
```

**Timestamp:** {datetime.now().strftime(\"%Y-%m-%d %H:%M UTC\")}

**Troubleshooting:**
1. Check API key configuration in GitHub secrets
2. Verify EventRegistry API quota/status
3. Check Gemini API availability
4. Review error logs above for specific issues

**Next Steps:**
- Fix the identified issues
- Run this workflow again
- Contact support if API issues persist
'''
        
        with open('preview_issue.md', 'w') as f:
            f.write(error_issue)
        
        return False

if __name__ == '__main__':
    test_apis_and_create_issue()
"
    
    - name: Create GitHub Issue with Preview
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create issue with the preview content
        issue_title="üßµ Thread Preview - $(date +'%Y-%m-%d %H:%M UTC')"
        
        gh issue create \
          --title "$issue_title" \
          --body-file preview_issue.md \
          --label "preview,testing" \
          --assignee "${{ github.actor }}"
          
        echo "‚úÖ GitHub issue created with thread preview"
        
    - name: Cleanup
      run: |
        rm -f preview_issue.md