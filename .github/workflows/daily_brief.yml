name: Daily Bitcoin Mining News Brief

# API Key Configuration Guide:
# =============================
# This workflow requires the following GitHub repository secrets:
#
# REQUIRED (Briefing will fail without these):
#   - EVENTREGISTRY_API_KEY: EventRegistry/NewsAPI.ai API key for fetching Bitcoin mining news
#   - GEMINI_API_KEY: Google Gemini API key for AI content generation and analysis
#
# OPTIONAL (Briefing uses fallback modes if missing):
#   - AGENTS_PROJECT_ID: Google Cloud Project ID for Agentspace Deep Research
#   - AGENTS_APP_ID: Google Agentspace Application ID for Deep Research
#   - AGENTS_DATA_STORE_ID: Google Agentspace Data Store ID for Deep Research  
#   - GOOGLE_APPLICATION_CREDENTIALS_JSON: Google Cloud service account JSON for Deep Research
#   - TWITTER_API_KEY: Twitter API key (not needed for briefing, only for validation)
#   - TWITTER_API_SECRET: Twitter API secret (not needed for briefing)
#   - TWITTER_ACCESS_TOKEN: Twitter access token (not needed for briefing)
#   - TWITTER_ACCESS_TOKEN_SECRET: Twitter access token secret (not needed for briefing)
#
# Setup Instructions:
# 1. Go to repository Settings > Secrets and variables > Actions
# 2. Add the required secrets listed above
# 3. For Google Agentspace: Apply for allowlist access to Agentspace Enterprise Plus
# 4. Test with workflow_dispatch before enabling scheduled runs

on:
  schedule:
    # Run daily at 7:00 AM UTC (2:00 AM EST, 11:00 PM PST previous day)
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      output_mode:
        description: 'Output mode for the brief'
        required: false
        default: 'console'
        type: choice
        options:
          - console
          - file
          - issue
      days_back:
        description: 'Number of days to look back for articles'
        required: false
        default: '1'
        type: string

env:
  # Twitter API (not needed for daily brief, but may be used for validation)
  TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
  TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
  TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
  TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
  
  # News API
  EVENTREGISTRY_API_KEY: ${{ secrets.EVENTREGISTRY_API_KEY }}
  
  # Gemini AI
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  
  # Google Agentspace API for Deep Research
  AGENTS_PROJECT_ID: ${{ secrets.AGENTS_PROJECT_ID }}
  AGENTS_APP_ID: ${{ secrets.AGENTS_APP_ID }}
  AGENTS_DATA_STORE_ID: ${{ secrets.AGENTS_DATA_STORE_ID }}
  
  # Google Cloud credentials for Agentspace API
  GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}

jobs:
  daily-brief:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
    
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Setup Google Cloud Credentials
      if: env.GOOGLE_APPLICATION_CREDENTIALS_JSON != ''
      run: |
        # Create secure temporary file for GCP credentials
        echo "Setting up Google Cloud credentials..."
        echo '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}' > /tmp/gcp-key.json
        chmod 600 /tmp/gcp-key.json  # Secure permissions
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
        
        # Validate JSON structure
        python -c "import json; json.load(open('/tmp/gcp-key.json'))" || {
          echo "❌ Invalid JSON in GOOGLE_APPLICATION_CREDENTIALS_JSON"
          exit 1
        }
        echo "✅ Google Cloud credentials configured successfully"
      
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        # Verify all dependencies are properly installed
        python -c "
        import sys
        missing = []
        required_modules = [
            'tweepy', 'eventregistry', 'google.generativeai', 
            'requests', 'beautifulsoup4', 'newspaper', 
            'googleapiclient', 'aiohttp', 'google.auth'
        ]
        for module in required_modules:
            try:
                __import__(module.replace('google.', 'google-'))
            except ImportError:
                try:
                    __import__(module)
                except ImportError:
                    missing.append(module)
        if missing:
            print(f'❌ Missing modules: {missing}')
            sys.exit(1)
        else:
            print('✅ All required dependencies installed successfully')
        "
      timeout-minutes: 5
    
    - name: Verify API Keys Configuration
      run: |
        echo "🔍 Checking API key configuration..."
        python -c "
        import os
        
        # Define required and optional API keys
        required_keys = {
          'EVENTREGISTRY_API_KEY': 'EventRegistry/NewsAPI access',
          'GEMINI_API_KEY': 'Gemini AI for enhanced content generation'
        }
        
        optional_keys = {
          'AGENTS_PROJECT_ID': 'Google Agentspace Deep Research',
          'AGENTS_APP_ID': 'Google Agentspace Deep Research', 
          'AGENTS_DATA_STORE_ID': 'Google Agentspace Deep Research',
          'GOOGLE_APPLICATION_CREDENTIALS': 'Google Cloud authentication',
          'TWITTER_API_KEY': 'Twitter integration (not needed for briefing)',
          'TWITTER_API_SECRET': 'Twitter integration (not needed for briefing)'
        }
        
        all_keys = {**required_keys, **optional_keys}
        
        missing_required = []
        missing_optional = []
        
        for key, description in all_keys.items():
          present = bool(os.getenv(key))
          status = '✅' if present else '❌'
          print(f'{status} {key}: {description}')
          
          if not present:
            if key in required_keys:
              missing_required.append(key)
            else:
              missing_optional.append(key)
        
        print()
        if missing_required:
          print(f'🚨 CRITICAL - Missing required keys: {missing_required}')
          print('   Briefing generation will fail without these keys!')
          exit(1)
        elif missing_optional:
          print(f'⚠️  Missing optional keys: {missing_optional}')
          print('   Briefing will use fallback modes for missing integrations')
        else:
          print('🎉 All API keys configured perfectly!')
        "
    
    - name: Run Daily Brief Generation
      id: daily_brief
      run: |
        echo "🤖 Generating daily Bitcoin mining news brief..."
        
        # Set output mode and days back from inputs or defaults
        OUTPUT_MODE="${{ github.event.inputs.output_mode || 'console' }}"
        DAYS_BACK="${{ github.event.inputs.days_back || '1' }}"
        
        echo "📊 Configuration:"
        echo "  Output Mode: $OUTPUT_MODE"
        echo "  Days Back: $DAYS_BACK"
        echo ""
        
        # Run the daily briefing
        python daily_briefing.py --days-back "$DAYS_BACK" --output "$OUTPUT_MODE" --verbose
      timeout-minutes: 20
      continue-on-error: true
    
    - name: Upload Brief as Artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: daily-brief-${{ github.run_number }}
        path: |
          daily_brief_*.md
          daily_brief_*.txt
          articles_log.json
        retention-days: 30
    
    - name: Create GitHub Issue with Brief
      if: github.event.inputs.output_mode == 'issue' && steps.daily_brief.outcome == 'success'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the generated brief file
          const files = fs.readdirSync('.');
          const briefFile = files.find(f => f.startsWith('daily_brief_') && f.endsWith('.md'));
          
          if (briefFile) {
            const briefContent = fs.readFileSync(briefFile, 'utf8');
            const today = new Date().toISOString().split('T')[0];
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Daily Bitcoin Mining News Brief - ${today}`,
              body: briefContent,
              labels: ['daily-brief', 'automated', 'bitcoin-mining']
            });
            
            console.log(`✅ Created GitHub issue with daily brief`);
          } else {
            console.log('❌ No brief file found to create issue');
          }
    
    - name: Cleanup Sensitive Files
      if: always()
      run: |
        # Securely remove any temporary credential files
        if [ -f "/tmp/gcp-key.json" ]; then
          echo "🧹 Cleaning up temporary credential files..."
          rm -f /tmp/gcp-key.json
          echo "✅ Temporary files cleaned up"
        fi
      continue-on-error: true
    
    - name: Commit Updated Logs
      if: always()
      run: |
        # Configure Git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check for changes in log files
        if git diff --exit-code articles_log.json >/dev/null 2>&1; then
          echo "📝 No changes to articles log"
        else
          echo "📝 Committing updated articles log..."
          git add articles_log.json
          git commit -m "📊 Update articles log from daily brief generation
          
          - Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Run ID: ${{ github.run_id }}
          - Days back: ${{ github.event.inputs.days_back || '1' }}"
          git push
        fi
      continue-on-error: true
    
    - name: Summary Report
      if: always()
      run: |
        echo "🏁 Daily Brief Generation Summary"
        echo "=================================="
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Status: ${{ steps.daily_brief.outcome }}"
        echo ""
        
        if [ -f "articles_log.json" ]; then
          echo "📊 Articles Log Status: ✅ Present"
          python -c "import json; data=json.load(open('articles_log.json')); print(f'  Total articles logged: {data.get(\"total_articles\", 0)}'); daily=data.get('daily_articles', []); latest=daily[-1] if daily else {}; print(f'  Latest date: {latest.get(\"date\", \"unknown\")}'); print(f'  Articles today: {len(latest.get(\"articles\", []))}')" 2>/dev/null || echo "  Error reading articles log"
        else
          echo "📊 Articles Log Status: ❌ Missing"
        fi
        
        echo ""
        if ls daily_brief_*.md >/dev/null 2>&1; then
          echo "📄 Brief Files Generated: ✅"
          for file in daily_brief_*.md; do
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "unknown")
            echo "  - $file (${size} bytes)"
          done
        else
          echo "📄 Brief Files Generated: ❌ None found"
        fi