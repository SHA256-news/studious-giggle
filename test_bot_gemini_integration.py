"""
Test bot integration with Gemini headline generation
"""
import sys
from pathlib import Path
from typing import Dict, Any, Optional
from unittest import mock

# Add parent directory to sys.path so we can import modules
sys.path.append(str(Path(__file__).resolve().parents[0]))

# Mock external dependencies before importing our modules
if "tweepy" not in sys.modules:
    sys.modules["tweepy"] = mock.MagicMock()

if "eventregistry" not in sys.modules:
    sys.modules["eventregistry"] = mock.MagicMock()

# Mock google.genai before importing
google_module = mock.MagicMock()
google_genai_module = mock.MagicMock()
google_types_module = mock.MagicMock()
google_module.genai = google_genai_module
google_genai_module.types = google_types_module

sys.modules.setdefault("google", google_module)
sys.modules.setdefault("google.genai", google_genai_module)
sys.modules.setdefault("google.genai.types", google_types_module)

from bot import BitcoinMiningNewsBot


class MockGeminiClient:
    """Mock Gemini client that returns a structured article with headline"""
    
    def analyze_article(self, article):
        return {
            'article_title': article.get('title', 'Unknown'),
            'article_url': article.get('url', 'No URL'),
            'analysis_text': 'Mock analysis text',
            'analysis_timestamp': '2024-01-01T00:00:00',
            'model_used': 'gemini-mock',
        }
    
    def generate_article(self, article):
        original_title = article.get('title', 'Unknown Article')
        return {
            'headline': f"Enhanced: {original_title}",
            'subhead': 'AI-generated subhead for testing',
            'sections': [
                {
                    'title': 'Overview',
                    'content': 'Mock article content generated by AI'
                }
            ],
            'source_title': original_title,
            'source_url': article.get('url', ''),
            'generated_timestamp': '2024-01-01T00:00:00',
            'model_used': 'gemini-mock',
        }


class MockTweetPoster:
    """Mock tweet poster that captures what would be posted"""
    
    def __init__(self):
        self.last_posted_article = None
        self.posted_count = 0
    
    def post_to_twitter(self, article):
        self.last_posted_article = article
        self.posted_count += 1
        return f"mock_tweet_id_{self.posted_count}"


class MockAPIManager:
    """Mock API manager that provides mock Gemini client"""
    
    def __init__(self, gemini_client):
        self.gemini_client = gemini_client
    
    def get_gemini_client(self):
        return self.gemini_client


def test_bot_uses_gemini_headline_in_tweets():
    """Test that the bot uses Gemini-generated headlines in tweets"""
    
    # Set up mocks
    gemini_client = MockGeminiClient()
    tweet_poster = MockTweetPoster()
    api_manager = MockAPIManager(gemini_client)
    
    # Create bot in safe mode
    bot = BitcoinMiningNewsBot(safe_mode=True)
    bot.api_manager = api_manager
    bot.tweet_poster = tweet_poster
    bot.skip_gemini_analysis = False  # Enable Gemini analysis
    
    # Mock the report generator and article content manager
    bot.report_generator = mock.MagicMock()
    bot.report_generator.save_analysis_report.return_value = "/tmp/mock_report.md"
    bot.article_content_manager = mock.MagicMock()
    bot.article_content_manager.save_article.return_value = "/tmp/mock_article.md"
    
    # Test article
    test_article = {
        'title': 'Bitcoin Mining Company Announces Expansion',
        'body': 'A major Bitcoin mining company has announced expansion plans...',
        'url': 'https://example.com/article',
        'uri': 'test-article-123'
    }
    
    # Post the article
    success = bot._post_article(test_article)
    
    # Verify success
    assert success, "Article posting should succeed"
    
    # Verify that Gemini client was called
    assert bot.report_generator.save_analysis_report.called, "Analysis report should be generated"
    assert bot.article_content_manager.save_article.called, "Article should be saved"
    
    # Verify the article passed to tweet poster contains Gemini headline
    posted_article = tweet_poster.last_posted_article
    assert posted_article is not None, "Article should have been posted"
    assert 'gemini_headline' in posted_article, "Posted article should contain Gemini headline"
    assert posted_article['gemini_headline'] == 'Enhanced: Bitcoin Mining Company Announces Expansion'
    
    print(f"âœ… Bot successfully used Gemini headline: {posted_article['gemini_headline']}")
    print(f"âœ… Original title: {posted_article['title']}")
    print(f"âœ… Tweet poster received enhanced article with Gemini headline")


def test_bot_fallback_when_gemini_disabled():
    """Test that bot works normally when Gemini is disabled"""
    
    # Create bot with Gemini disabled
    bot = BitcoinMiningNewsBot(safe_mode=True)
    bot.api_manager = MockAPIManager(None)  # No Gemini client
    tweet_poster = MockTweetPoster()
    bot.tweet_poster = tweet_poster
    bot.skip_gemini_analysis = True  # Disable Gemini analysis
    
    # Test article
    test_article = {
        'title': 'Bitcoin Mining News Without Gemini',
        'body': 'Regular news article...',
        'url': 'https://example.com/article2',
        'uri': 'test-article-456'
    }
    
    # Post the article
    success = bot._post_article(test_article)
    
    # Verify success
    assert success, "Article posting should succeed even without Gemini"
    
    # Verify the article passed to tweet poster does NOT contain Gemini headline
    posted_article = tweet_poster.last_posted_article
    assert posted_article is not None, "Article should have been posted"
    assert 'gemini_headline' not in posted_article, "Posted article should not contain Gemini headline when disabled"
    assert posted_article['title'] == 'Bitcoin Mining News Without Gemini'
    
    print(f"âœ… Bot worked correctly without Gemini: {posted_article['title']}")


def test_bot_fallback_when_gemini_fails():
    """Test that bot handles Gemini failures gracefully"""
    
    class FailingGeminiClient:
        def analyze_article(self, article):
            raise Exception("Mock Gemini failure")
        
        def generate_article(self, article):
            raise Exception("Mock Gemini failure")
    
    # Create bot with failing Gemini client
    bot = BitcoinMiningNewsBot(safe_mode=True)
    bot.api_manager = MockAPIManager(FailingGeminiClient())
    tweet_poster = MockTweetPoster()
    bot.tweet_poster = tweet_poster
    bot.skip_gemini_analysis = False  # Enable Gemini but it will fail
    
    # Mock the report generator and article content manager
    bot.report_generator = mock.MagicMock()
    bot.article_content_manager = mock.MagicMock()
    
    # Test article
    test_article = {
        'title': 'Bitcoin Mining News With Failing Gemini',
        'body': 'News article with failing AI...',
        'url': 'https://example.com/article3',
        'uri': 'test-article-789'
    }
    
    # Post the article
    success = bot._post_article(test_article)
    
    # Verify success (bot should continue despite Gemini failure)
    assert success, "Article posting should succeed even when Gemini fails"
    
    # Verify the article passed to tweet poster does NOT contain Gemini headline
    posted_article = tweet_poster.last_posted_article
    assert posted_article is not None, "Article should have been posted"
    assert 'gemini_headline' not in posted_article, "Posted article should not contain Gemini headline when it fails"
    assert posted_article['title'] == 'Bitcoin Mining News With Failing Gemini'
    
    print(f"âœ… Bot handled Gemini failure gracefully: {posted_article['title']}")


if __name__ == "__main__":
    print("Testing bot integration with Gemini headline generation...")
    
    test_bot_uses_gemini_headline_in_tweets()
    test_bot_fallback_when_gemini_disabled()
    test_bot_fallback_when_gemini_fails()
    
    print("\nðŸŽ‰ All bot integration tests passed!")